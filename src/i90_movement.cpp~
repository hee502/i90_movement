///////////////////////////////////////////////////////////////////////////////
//Source for i90_movement node to send movement commands to i90							 //
//v2.6 																																			 //
//-Missing comments added.																									 //
//Huseyin Emre Erdem 																												 //
//29.08.2014 																																 //
///////////////////////////////////////////////////////////////////////////////

/*This node makes i90 go to the target position published from i90_sensor_board 
node under i90_target_pos topic. The type of message published is i90_movement::pos.
After acquiring the target, it moves 20 cm forward to make the center of the robot
and the sensors equal, turns and goes towards the target. Informs other nodes upon
competion for position estimation.*/

#include "ros/ros.h"
#include "pos.h"//position information
#include "MotorInfoArray.h"//encoder readings
#include "RangeArray.h"//For i90 ir readings
#include <math.h>
#include "UInt8.h"
#include <geometry_msgs/Twist.h>//For movement commands
#include <unistd.h>//for usleep()
#include <visualization_msgs/Marker.h>//for visualization

#define MAXENCODER 32768//Incremantal encoder limit
#define PI 3.141593
#define SPEED 0.1//Default: 0.5
#define DURTRANSLATION 2400000000//Duration for 0.5m travel with predefined speed (1300000 for 0.5 speed, 2400000 for 0.1)
#define DURTURN 2800000000//Duration for 90 degrees of turning with predefined speed (2500000 for 0.5 speed, 3200000 for 0.1) WAS 3200000000
#define ECCENTRIC 0.16//Distance between sensor and robot center
#define WAITSHORT 500000//500ms
#define WAITLONG 1000000//1s

/*Variables*/
volatile float fCurrentPosX;//Current X position
volatile float fCurrentPosY;//Current Y position
volatile float fCurrentAngleYaw;//Current heading angle
volatile float fTargetPosX;//Target X position
volatile float fTargetPosY;//Target Y position
volatile float fTargetAngleYaw;//Target heading
volatile float fDistance;//Difference between the target current positions
volatile float fAngle;//Difference between the target yaw and the current yaw angles
volatile int iCurrentPulseL; //Encoder pulse value for the left motor
volatile int iCurrentPulseR; //Encoder pulse value for the right motor
volatile int iTargetPulseL;//Encoder pulse target value for the left motor
volatile int iTargetPulseR;//Encoder pulse target value for the right motor
volatile int iTurnPulses;//Amount of pulses to turn to correct heading
volatile int iDistancePulses;//Amount of pulses to move to correct position
volatile int iActionSteps;//1:Only turn, 3:Move, Turn, Move
volatile int iActionStepNum;//Current action step number
volatile bool bTurnState;//Shows if the turning before straight movement is done or not, 0:not 1:done
volatile bool bMoveState;//Shows if movement is done or not
volatile bool bTurnDir;//0:CW, 1:CCW
int iCounter = 0;//Step counter
volatile uint64_t iDurationAct1;//Duration to give motor control orders to limit the movement amount
volatile uint64_t iDurationAct2;//Duration to give motor control orders to limit the movement amount
volatile uint64_t iDurationAct3;//Duration to give motor control orders to limit the movement amount
volatile uint64_t iNDiff;//Time difference in nanoseconds
volatile float fSonar[3];//0:Left, 1:Right
bool bObstacleDuringTurn = false;//if obstacle is present during turn
volatile bool bObstructedBeforeTurn = false;//if obstacle is present before turn
float fStopDistance[3] = {0.25, 0.3, 0.25};//Distances to stop before an obstacle for 3 internal sonars
volatile int iTurnDirPerformed;//0:CW, 1:CCW
volatile int iObstacleNum = 0;//The number of obstacle visualized
uint32_t shape = visualization_msgs::Marker::CUBE;//obstacle type to be visualized
float fSonarAngle[3] = {20.00, 0.00, -20.00};//Angles of sonar sensors
volatile bool bVisualization = false;//Flag to publishment for visualization

/*Objects*/
i90_movement::UInt8 iFlag;//Message to be sent when pos est. is required after rotation
geometry_msgs::Twist cmdvel_;//commands to be sent to i90

/*Prototypes*/
void action1(const i90_movement::pos posReceived);//Turns i90 to target position
uint64_t calcRotationDur(float fCurrentAngle, float fTargetAngle);//Calculates the required duration for rotation
uint64_t calcTranslationDur(float fCurrentX, float fCurrentY, float fTargetX, float fTargetY);//Calculates the required duration for translation*/
void getCurrentPos(const i90_movement::pos posReceived);//Processes data read from i90_current_pos topic
void getEncoderPulses(const drrobot_I90_player::MotorInfoArray MotorInfoArray);//Processes data read from drrobot_motor topic
void getSonarValues(const drrobot_I90_player::RangeArray sonarValues);//Reads internal ultrasonic sensors

/*Main function*/
int main(int argc, char **argv)
{
	ros::init(argc, argv, "i90_movement");//Create node called "i90_movement"
	ros::NodeHandle n;//Create nodehandler to modify features of the node

	/*Subscribers and Publishers*/
	ros::Subscriber targetSub = n.subscribe("i90_target_pos", 1, action1);//To read target positions
	ros::Subscriber currentSub = n.subscribe("i90_current_pos", 1, getCurrentPos);//To read current estimated position
	ros::Subscriber encoderSub = n.subscribe("drrobot_motor", 1, getEncoderPulses);//To read encoder values
	ros::Subscriber sonarSub = n.subscribe("drrobot_sonar", 1, getSonarValues);//To read internal sonars
	ros::Publisher velPub = n.advertise<geometry_msgs::Twist>("drrobot_cmd_vel", 1);//To publish movement commands
	ros::Publisher rotationPub = n.advertise<i90_movement::UInt8>("i90_rotation_done",1);//To publish flags indicating rotation is done (to update yaw angle)
	ros::Publisher translationPub = n.advertise<i90_movement::UInt8>("i90_translation_done",1);//To publish flags indicating movement is done (to update position)
	ros::Publisher positionPub = n.advertise<i90_movement::UInt8>("i90_movement_done",1);//Send message to i90_position node to publish the estimated position
	ros::Publisher turnDirPub = n.advertise<i90_movement::UInt8>("i90_turn_dir",1);//To publish flag after a rotation is performed
	ros::Publisher markerPub = n.advertise<visualization_msgs::Marker>("visualization_marker",10);//To publish obstacles for visualization

	ros::Duration d = ros::Duration(2,0);
	ros::Rate loop_rate(50);//50 Hz
	iFlag.data = 1;
	bMoveState = false;
	bTurnState = false;
	iActionSteps = 0;
	iActionStepNum = 0;
	ros::Time start;
	ros::Time now;
	ros::Duration diff;

	while (ros::ok()){
		bObstacleDuringTurn = false;

		/*Visualization*/
		if(bVisualization == true){
			for(int i=0;i<3;i++){
				if(fSonar[i] < 2.0){
					/*Set visualization parameters*/
					visualization_msgs::Marker marker;
					marker.header.frame_id = "/my_frame";
					marker.header.stamp = ros::Time::now();
					marker.ns = "basic_shapes";
					marker.id = iObstacleNum;
					iObstacleNum++;
					marker.type = shape;
					marker.action = visualization_msgs::Marker::ADD;
					marker.pose.orientation.x = 0.0;
					marker.pose.orientation.y = 0.0;
					marker.pose.orientation.z = 0.0;
					marker.pose.orientation.w = 1.0;
					marker.scale.x = 0.1;
					marker.scale.y = 0.1;
					marker.scale.z = 0.1;
					marker.color.r = 1.0f;
					marker.color.g = 0.0f;
					marker.color.b = 0.0f;
					marker.color.a = 1.0;
					marker.lifetime = ros::Duration();
					marker.pose.position.x = fCurrentPosX + fSonar[i] * cos((fCurrentAngleYaw + fSonarAngle[i]) / 180 * M_PI);
					marker.pose.position.y = fCurrentPosY + fSonar[i] * sin((fCurrentAngleYaw + fSonarAngle[i]) / 180 * M_PI);
					marker.pose.position.z = 0;
					markerPub.publish(marker);
				}
			}
			bVisualization = false;
		}

		/*3 actions required to reach the target, go 0.2m forwards*/
		if(iActionSteps == 3 && iActionStepNum == 1){
			if(bMoveState == false){//If movement not performed yet
				cmdvel_.linear.x = SPEED;//Set speed
				cmdvel_.angular.z = 0.0;
				iNDiff = 0;
				velPub.publish(cmdvel_);
				start = ros::Time::now();
				while(iNDiff < iDurationAct1){//Don't stop until reaching the duration
					ros::spinOnce();
					if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){//If no obstacle is in range keep moving
						now = ros::Time::now();
						diff = now - start;
						iNDiff = diff.toNSec();
					}
					else{//Otherwise stop
						break;
					}
				}
				cmdvel_.linear.x = 0.0;//Reset speed
				velPub.publish(cmdvel_);
				usleep(WAITSHORT);//Wait for drone to physically stop and publish up-to-date encoder values
				translationPub.publish(iFlag);//Enable position estimation update after translation
				usleep(WAITSHORT);
				bMoveState = true;
			}
			else{
				bMoveState = false;//Go to next action
				iActionStepNum = 2;
			}
		}

		/*Turn to target*/
		if(iActionSteps == 3 && iActionStepNum == 2){
			if(bTurnState == false){//Rotation not performed yet

				if(bTurnDir == 0){//CW
					cmdvel_.angular.z = -SPEED;
					iTurnDirPerformed = 0;
					cmdvel_.linear.x = 0.0;

					/*If not obstructed before. Turn until seeing an obstacle*/
					ros::spinOnce();//Update sensors
					if(fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
						iNDiff = 0;
						velPub.publish(cmdvel_);
						start = ros::Time::now();
						while(iNDiff < iDurationAct2 && fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
							ros::spinOnce();
							now = ros::Time::now();
							diff = now - start;
							iNDiff = diff.toNSec();
						}
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If stopped because of an obstacle on the right, turn CCW to prevent it*/
						if(fSonar[2] <= fStopDistance[2]){
							cmdvel_.angular.z = SPEED;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(fSonar[2] <= fStopDistance[2]){
								ros::spinOnce();
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
							cmdvel_.angular.z = 0.0;
							cmdvel_.linear.x = SPEED;
							velPub.publish(cmdvel_);
							usleep(500000);//Turn predefined time
							cmdvel_.linear.x = 0.0;
							velPub.publish(cmdvel_);
						}
					}

					/*Obstructed before. Turn up to 90 degrees if obstacle is not eliminated*/
					else{
						/*Turn until reaching the angle or finding an unobstructed view*/
						bool bUnobstructedView = false;
						if(fSonar[0] <= fStopDistance[0] && fSonar[2] > fStopDistance[2]){//Left is obstructed, turn right
							iNDiff = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[0] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[0] > fStopDistance[0] && fSonar[2] <= fStopDistance[2]){//Right is obstructed, turn left
							iNDiff = 0;
							cmdvel_.angular.z = SPEED;
							iTurnDirPerformed = 1;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[2] > fStopDistance[2]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[1] <= fStopDistance[1]){//Both sides are obstructed, turn in the way with further distance to the obstacle
							if(fSonar[0] > fSonar[2]){//Turn CCW
								iNDiff = 0;
								cmdvel_.angular.z = SPEED;
								iTurnDirPerformed = 1;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
							else{//Turn CW
								iNDiff = 0;
								cmdvel_.angular.z = -SPEED;
								iTurnDirPerformed = 0;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
						}
						/*Only center is obstructed with a small object (pole)*/
						if(fSonar[0] > fStopDistance[0] && fSonar[1] <= fStopDistance[1] && fSonar[2] > fStopDistance[2]){
							iNDiff = 0;
							cmdvel_.angular.z = -SPEED;
							iTurnDirPerformed = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN){
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}															
						}
						usleep(200000);
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If still obstructed turn up to 90 degrees*/
						if(bUnobstructedView == false){
						}
					}
				}
				else{//CCW
					cmdvel_.angular.z = SPEED;
					iTurnDirPerformed = 1;
					cmdvel_.linear.x = 0.0;

					/*Not obstructed before. Turn until seeing an obstacle*/
					ros::spinOnce();//Update sensors
					if(fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
						iNDiff = 0;
						velPub.publish(cmdvel_);
						start = ros::Time::now();
						while(iNDiff < iDurationAct2 && fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
							ros::spinOnce();//Update sonars
							now = ros::Time::now();//Update time passed
							diff = now - start;
							iNDiff = diff.toNSec();
						}
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If stopped because of an obstacle on the left, turn CW to prevent it*/
						if(fSonar[0] <= fStopDistance[0]){
							cmdvel_.angular.z = -SPEED;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(fSonar[0] <= fStopDistance[0]){
								ros::spinOnce();
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
							cmdvel_.angular.z = 0.0;
							cmdvel_.linear.x = SPEED;
							iTurnDirPerformed = 1;
							velPub.publish(cmdvel_);
							usleep(500000);
							cmdvel_.linear.x = 0.0;
							velPub.publish(cmdvel_);
						}
					}

					/*Obstructed before. Turn up to 90 degrees if obstacle is not eliminated*/
					else{
						/*Turn until reaching the angle or finding an unobstructed view*/
						bool bUnobstructedView = false;
						if(fSonar[0] <= fStopDistance[0] && fSonar[2] > fStopDistance[2]){//Left is obstructed, turn right
							iNDiff = 0;
							cmdvel_.angular.z = -SPEED;
							iTurnDirPerformed = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[0] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[0] > fStopDistance[0] && fSonar[2] <= fStopDistance[2]){//Right is obstructed, turn left
							iNDiff = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[2] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[1] <= fStopDistance[1]){//Both sides are obstructed, turn in the way with further distance to the obstacle
							if(fSonar[0] > fSonar[2]){//Turn CCW
								iNDiff = 0;
								cmdvel_.angular.z = SPEED;
								iTurnDirPerformed = 1;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
							else{//Turn CW
								iNDiff = 0;
								cmdvel_.angular.z = -SPEED;
								iTurnDirPerformed = 0;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
						}
						usleep(200000);
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If still obstructed turn up to 90 degrees*/
						if(bUnobstructedView == true){
							printf("Obstacle still there. More turn is needed.\n\r");
						}
					}
				}

				cmdvel_.angular.z = 0.0;
				velPub.publish(cmdvel_);
				usleep(WAITSHORT);//Wait for the robot to physicall stop and publish up-to-date encoder values
				iFlag.data = iTurnDirPerformed;
				turnDirPub.publish(iFlag);
				usleep(WAITSHORT);
				rotationPub.publish(iFlag);//Enable position estimation update after translation
				usleep(WAITSHORT);
				bTurnState = true;				
			}
			else{//Rotation performed, go to next action
				bTurnState = false;
				iActionStepNum = 3;
			}
		}

		/*Move to target*/
		if(iActionSteps == 3 && iActionStepNum == 3){
			printf("ACTION3 IS ACTIVE\n\r");
			if(bMoveState == false){//If movement not performed yet
				cmdvel_.linear.x = SPEED;
				iTurnDirPerformed = 1;
				cmdvel_.angular.z = 0.0;
				iNDiff = 0;
				velPub.publish(cmdvel_);
				start = ros::Time::now();
				while(iNDiff < iDurationAct3){
					ros::spinOnce();
					if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){//If no obstacle is in range keep moving
						now = ros::Time::now();
						diff = now - start;
						iNDiff = diff.toNSec();
					}
					else{//Otherwise stop
						printf("Obstacle during action3\n\r");
						break;
					}
				}
				cmdvel_.linear.x = 0.0;
				velPub.publish(cmdvel_);
				usleep(WAITSHORT);//Wait for the robot to physicall stop and publish up-to-date encoder values
				translationPub.publish(iFlag);//Enable position estimation update after translation
				usleep(WAITSHORT);
				positionPub.publish(iFlag);
				usleep(WAITSHORT);
				bMoveState = true;
			}
			else{//Action 3 perfomed
				bMoveState = false;
				iActionStepNum = 0;
				iCounter++;
			}
		}

		/*Only turning is required to reach the target*/
		if(iActionSteps == 1 && iActionStepNum == 2){//Only turning is required
			if(bTurnState == false){//Rotation not performed yet
				printf("ACTION2 IS ACTIVE (ONLY TURN)\n\r");

				/*CW*/
				if(bTurnDir == 0){//CW
					cmdvel_.angular.z = -SPEED;
					iTurnDirPerformed = 0;
					cmdvel_.linear.x = 0.0;

					/*If not obstructed before. Turn until seeing an obstacle*/
					ros::spinOnce();//Update sensors
					if(fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
						printf("Not obstructed before.\n\r");
						iNDiff = 0;
						velPub.publish(cmdvel_);
						start = ros::Time::now();
						while(iNDiff < iDurationAct2 && fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
							ros::spinOnce();
							now = ros::Time::now();
							diff = now - start;
							iNDiff = diff.toNSec();
						}
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If stopped because of an obstacle on the right, turn CCW to prevent it*/
						if(fSonar[2] <= fStopDistance[2]){
							printf("Obstacle on the right. Turning back.\n\r");
							cmdvel_.angular.z = SPEED;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(fSonar[2] <= fStopDistance[2]){
								ros::spinOnce();
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
							cmdvel_.angular.z = 0.0;
							cmdvel_.linear.x = SPEED;
							velPub.publish(cmdvel_);
							usleep(500000);
							cmdvel_.linear.x = 0.0;
							velPub.publish(cmdvel_);
						}
					}

					/*Obstructed before. Turn up to 90 degrees if obstacle is not eliminated*/
					else{
						printf("Obstructed before.\n\r");
						/*Turn until reaching the angle or finding an unobstructed view*/
						bool bUnobstructedView = false;
						if(fSonar[0] <= fStopDistance[0] && fSonar[2] > fStopDistance[2]){//Left is obstructed, turn right
							iNDiff = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[0] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[0] > fStopDistance[0] && fSonar[2] <= fStopDistance[2]){//Right is obstructed, turn left
							iNDiff = 0;
							cmdvel_.angular.z = SPEED;
							iTurnDirPerformed = 1;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[2] > fStopDistance[2]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[1] <= fStopDistance[1]){//Both sides are obstructed, turn in the way with further distance to the obstacle
							if(fSonar[0] > fSonar[2]){//Turn CCW
								iNDiff = 0;
								cmdvel_.angular.z = SPEED;
								iTurnDirPerformed = 1;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
							else{//Turn CW
								iNDiff = 0;
								cmdvel_.angular.z = -SPEED;
								iTurnDirPerformed = 0;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
						}
						/*Only center is obstructed with a small object (pole)*/
						if(fSonar[0] > fStopDistance[0] && fSonar[1] <= fStopDistance[1] && fSonar[2] > fStopDistance[2]){
							iNDiff = 0;
							cmdvel_.angular.z = -SPEED;
							iTurnDirPerformed = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN){
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}															
						}
						usleep(200000);
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If still obstructed turn up to 90 degrees*/
						if(bUnobstructedView == false){
							printf("Obstacle still there. More turn is needed.\n\r");
							//Turn up to 90 degrees
						}
					}
				}
				else{//CCW
					cmdvel_.angular.z = SPEED;
					iTurnDirPerformed = 1;
					cmdvel_.linear.x = 0.0;

					/*Not obstructed before. Turn until seeing an obstacle*/
					ros::spinOnce();//Update sensors
					if(fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
						printf("Not obstructed before.\n\r");
						iNDiff = 0;
						velPub.publish(cmdvel_);
						start = ros::Time::now();
						while(iNDiff < iDurationAct2 && fSonar[0] > fStopDistance[0] && fSonar[2] > fStopDistance[2]){
							ros::spinOnce();//Update sonars
							now = ros::Time::now();//Update time passed
							diff = now - start;
							iNDiff = diff.toNSec();
						}
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If stopped because of an obstacle on the left, turn CW to prevent it*/
						printf("Obstacle on the left. Turning back.\n\r");
						if(fSonar[0] <= fStopDistance[0]){
							cmdvel_.angular.z = -SPEED;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(fSonar[0] <= fStopDistance[0]){
								ros::spinOnce();
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
							cmdvel_.angular.z = 0.0;
							cmdvel_.linear.x = SPEED;
							iTurnDirPerformed = 1;
							velPub.publish(cmdvel_);
							usleep(500000);
							cmdvel_.linear.x = 0.0;
							velPub.publish(cmdvel_);
						}
					}

					/*Obstructed before. Turn up to 90 degrees if obstacle is not eliminated*/
					else{
						printf("Obstructed before.\n\r");
						/*Turn until reaching the angle or finding an unobstructed view*/
						bool bUnobstructedView = false;
						if(fSonar[0] <= fStopDistance[0] && fSonar[2] > fStopDistance[2]){//Left is obstructed, turn right
							iNDiff = 0;
							cmdvel_.angular.z = -SPEED;
							iTurnDirPerformed = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[0] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[0] > fStopDistance[0] && fSonar[2] <= fStopDistance[2]){//Right is obstructed, turn left
							iNDiff = 0;
							velPub.publish(cmdvel_);
							start = ros::Time::now();
							while(iNDiff < DURTURN && bUnobstructedView == false){
								ros::spinOnce();
								if(fSonar[2] > fStopDistance[0]){
									bUnobstructedView = true;
								}
								now = ros::Time::now();
								diff = now - start;
								iNDiff = diff.toNSec();
							}
						}
						if(fSonar[1] <= fStopDistance[1] /*&& fSonar[2] <= fStopDistance[2]*/){//Both sides are obstructed, turn in the way with further distance to the obstacle
							if(fSonar[0] > fSonar[2]){//Turn CCW
								iNDiff = 0;
								cmdvel_.angular.z = SPEED;
								iTurnDirPerformed = 1;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
							else{//Turn CW
								iNDiff = 0;
								cmdvel_.angular.z = -SPEED;
								iTurnDirPerformed = 0;
								velPub.publish(cmdvel_);
								start = ros::Time::now();
								while(iNDiff < DURTURN && bUnobstructedView == false){
									ros::spinOnce();
									bUnobstructedView = false;
									if(fSonar[0] > fStopDistance[0] && fSonar[1] > fStopDistance[1] && fSonar[2] > fStopDistance[2]){
										bUnobstructedView = true;
									}
									now = ros::Time::now();
									diff = now - start;
									iNDiff = diff.toNSec();
								}								
							}
						}
						usleep(200000);
						cmdvel_.angular.z = 0.0;
						velPub.publish(cmdvel_);

						/*If still obstructed turn up to 90 degrees*/
						if(bUnobstructedView == true){
							printf("Obstacle still there. More turn is needed.\n\r");
							//Turn up to 90 degrees
						}
					}
				}

				cmdvel_.angular.z = 0.0;
				velPub.publish(cmdvel_);
				usleep(WAITSHORT);
				iFlag.data = iTurnDirPerformed;
				turnDirPub.publish(iFlag);
				usleep(WAITSHORT);
				rotationPub.publish(iFlag);//Enable position estimation update after translation
				usleep(WAITSHORT);
				positionPub.publish(iFlag);
				usleep(WAITSHORT);
				bTurnState = true;				
			}
			else{//Rotation performed, go to next action
				bTurnState = false;
				iActionStepNum = 0;
				iCounter++;			
			}
		}

		ros::spinOnce();
		loop_rate.sleep();
	}
	return 0;
}

/*Reads the target, makes robot go 20cm forwards if necessary*/
void action1(const i90_movement::pos posReceived){
	
	/*Assign incoming values to variables*/
	fTargetPosX = posReceived.fXPos; //Get target position in 'x' axis from i90_sensor_board
	fTargetPosY = posReceived.fYPos; //Get target position in 'y' axis from i90_sensor_board
	fTargetAngleYaw = posReceived.fYawAngle;//Get target angle
	printf("\n\r-%d- Received target: %f\t%f\t%f\n\r", iCounter, fTargetPosX, fTargetPosY, fTargetAngleYaw);

	/*Calculate the distance to see if going forward is necessary*/
	if(fTargetPosX != fCurrentPosX){//Move, turn, move required
		float fXPosToTurn	= fCurrentPosX + cos(fCurrentAngleYaw * PI / 180.00) * ECCENTRIC;
		float fYPosToTurn = fCurrentPosY + sin(fCurrentAngleYaw * PI / 180.00) * ECCENTRIC;
		iDurationAct1 = calcTranslationDur(fCurrentPosX, fCurrentPosY, fXPosToTurn, fYPosToTurn);
		iDurationAct2 = calcRotationDur(fCurrentAngleYaw, fTargetAngleYaw);
		iDurationAct3 = calcTranslationDur(fXPosToTurn, fYPosToTurn, fTargetPosX, fTargetPosY);
		iActionSteps = 3;
		iActionStepNum = 1;//Start with straight movement
	}
	else{//Only turn
		iDurationAct2 = calcRotationDur(fCurrentAngleYaw, fTargetAngleYaw);
		iActionSteps = 1;
		iActionStepNum = 2;//Only turn
	}
}

/*Calculates movement duration for rotation*/
uint64_t calcRotationDur(float fCurrentAngle, float fTargetAngle){

	fAngle = fCurrentAngle - fTargetAngle;
	if(fAngle < 0.00){
		fAngle = abs(fAngle);
		if(fAngle > 90.00){
			fAngle = 360.00 - fAngle;
			bTurnDir = 0;
		}
		else{
			bTurnDir = 1;
		}
	}
	else{
		if(fAngle > 90.00){
			fAngle = 360.00 - fAngle;
			bTurnDir = 1;
		}
		else{
			bTurnDir = 0;
		}
	}

	uint64_t duration = fAngle / 90.00 * DURTURN;//90.00 degrees ~= 2500000 uSeconds	with SPEED angular x speed	
	ROS_INFO("-%d- Angle difference: %f\t%d", iCounter, fAngle, bTurnDir);
	bVisualization = true;
	return duration;
}

/*Calculates movement duration for translation*/
uint64_t calcTranslationDur(float fCurrentX, float fCurrentY, float fTargetX, float fTargetY){
	fDistance = sqrt(pow(fTargetX-fCurrentX,2) + pow(fTargetY-fCurrentY,2)); //Calculate distance in meters between target and current positions
	ROS_INFO("-%d- Distance to translate: %f", iCounter, fDistance);
	uint64_t duration = fDistance / 0.5 * DURTRANSLATION;//0.5m with 0.5 linear speed ~= 1300000
	return duration;
}

/*Processes data read from i90_current_pos topic*/
void getCurrentPos(const i90_movement::pos posReceived){
	fCurrentPosX = posReceived.fXPos;
	fCurrentPosY = posReceived.fYPos;
	fCurrentAngleYaw = posReceived.fYawAngle;
}

/*Processes data read from drrobot_motor topic*/
void getEncoderPulses(const drrobot_I90_player::MotorInfoArray motorInfoArray)
{
	iCurrentPulseL =	motorInfoArray.motorInfos[0].encoder_pos;
	iCurrentPulseR =	motorInfoArray.motorInfos[1].encoder_pos;
}

void getSonarValues(const drrobot_I90_player::RangeArray sonarValues){
	fSonar[0] = sonarValues.ranges[0].range;//Left sonar
	fSonar[1] = sonarValues.ranges[1].range;//Left sonar
	fSonar[2] = sonarValues.ranges[2].range;//Right sonar
	//printf("Sonars: %f\t%f\t%f\n\r", fSonar[0], fSonar[1], fSonar[2]);
}

